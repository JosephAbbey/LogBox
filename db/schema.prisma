// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// --------------------------------------

model User {
    id             Int      @id @default(autoincrement())
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    name           String
    email          String   @unique
    hashedPassword String?
    role           String   @default("USER")

    tokens   Token[]
    sessions Session[]

    apps App[]
}

model Session {
    id                 Int       @id @default(autoincrement())
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    expiresAt          DateTime?
    handle             String    @unique
    hashedSessionToken String?
    antiCSRFToken      String?
    publicData         String?
    privateData        String?

    user   User? @relation(fields: [userId], references: [id])
    userId Int?
}

model Token {
    id          Int      @id @default(autoincrement())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    hashedToken String
    type        String
    // See note below about TokenType enum
    // type        TokenType
    expiresAt   DateTime
    sentTo      String

    user   User @relation(fields: [userId], references: [id])
    userId Int

    @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model App {
    name       String      @unique
    id         Int         @id @default(autoincrement())
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    builders   Builder[]
    hosts      Host[]
    users      User[]
    repository Repository?
}

model Builder {
    id        Int      @id @default(autoincrement())
    appId     Int
    app       App      @relation(fields: [appId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    logs      Logs[]
}

model Host {
    id        Int      @id @default(autoincrement())
    appId     Int
    app       App      @relation(fields: [appId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    logs      Logs[]
}

model Repository {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    app       App      @relation(fields: [appId], references: [id])
    appId     Int      @unique
    type      String
    url       String
}

model Logs {
    id        Int      @id @default(autoincrement())
    name      String
    builderId Int?
    builder   Builder? @relation(fields: [builderId], references: [id])
    hostId    Int?
    host      Host?    @relation(fields: [hostId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    webhook   Webhook?
    messages  Log[]
}

model Log {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    message   String
    level     String
    logsId    Int
    logs      Logs     @relation(fields: [logsId], references: [id])
}

model Webhook {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    logs      Logs     @relation(fields: [logsId], references: [id])
    logsId    Int      @unique
}
